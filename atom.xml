<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wangsiyong&#39;s Blog</title>
  
  <subtitle>QAQ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cabbywang.github.io/"/>
  <updated>2018-05-24T14:58:31.450Z</updated>
  <id>http://cabbywang.github.io/</id>
  
  <author>
    <name>wangsiyong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git高阶操作</title>
    <link href="http://cabbywang.github.io/2018/04/28/git%E9%AB%98%E9%98%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://cabbywang.github.io/2018/04/28/git高阶操作/</id>
    <published>2018-04-28T15:42:27.000Z</published>
    <updated>2018-05-24T14:58:31.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-高阶操作"><a href="#git-高阶操作" class="headerlink" title="git 高阶操作"></a>git 高阶操作</h1><p>在这里推荐使用<a href="https://www.atlassian.com/" target="_blank" rel="noopener">Atlassian</a>公司的<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a>, <code>git</code>基本操作都可以轻松的完成. 这里记录一下<code>SourceTree</code>不能实现或者说比较难实现的情况, 之后会不断更新.</p><h2 id="git-commit-后发现遗漏文件解决办法"><a href="#git-commit-后发现遗漏文件解决办法" class="headerlink" title="git commit 后发现遗漏文件解决办法"></a>git commit 后发现遗漏文件解决办法</h2><p><strong>注意: 在push之前进行操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add xx</span><br><span class="line">git commit -m <span class="string">"aa"</span></span><br><span class="line">git add yy</span><br><span class="line">git commit --amend -m <span class="string">'aa and bb'</span>        <span class="comment"># update commit summary</span></span><br><span class="line">git commit --amend -m --no-edit          <span class="comment"># don't update commit summary</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="修改历史提交中的commit-summary"><a href="#修改历史提交中的commit-summary" class="headerlink" title="修改历史提交中的commit summary"></a>修改历史提交中的<code>commit summary</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git rebase -i HEAD~3</span></span><br><span class="line">git rebase -i [commit-id]</span><br><span class="line">git commit --amend -m <span class="string">'aa'</span>               <span class="comment"># 提交更改为'aa'</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h2 id="git-reset-git-revert-git-checkout"><a href="#git-reset-git-revert-git-checkout" class="headerlink" title="git reset / git revert / git checkout"></a>git reset / git revert / git checkout</h2><table><thead><tr><th>操作</th><th>文件层面</th><th>提交层面</th></tr></thead><tbody><tr><td>git reset</td><td>把文件从暂存区移出</td><td>在私有分支上舍弃一些没有提交的更改</td></tr><tr><td>git checkout</td><td>丢去工作目录中对文件的更改</td><td>切换分支或切换到某个版本(commit ID)</td></tr><tr><td>git revert</td><td>无</td><td>在公共分支上回滚(生成一次提交)</td></tr></tbody></table><h2 id="创建一个全新的分支"><a href="#创建一个全新的分支" class="headerlink" title="创建一个全新的分支"></a>创建一个全新的分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan script  <span class="comment"># 创建一个"孤儿"分支, 这个分支是独立的</span></span><br><span class="line">git rm rf .                   <span class="comment"># 删除当前目录下除.git以外的文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-高阶操作&quot;&gt;&lt;a href=&quot;#git-高阶操作&quot; class=&quot;headerlink&quot; title=&quot;git 高阶操作&quot;&gt;&lt;/a&gt;git 高阶操作&lt;/h1&gt;&lt;p&gt;在这里推荐使用&lt;a href=&quot;https://www.atlassian.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Atlassian&lt;/a&gt;公司的&lt;a href=&quot;https://www.sourcetreeapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SourceTree&lt;/a&gt;, &lt;code&gt;git&lt;/code&gt;基本操作都可以轻松的完成. 这里记录一下&lt;code&gt;SourceTree&lt;/code&gt;不能实现或者说比较难实现的情况, 之后会不断更新.&lt;/p&gt;
&lt;h2 id=&quot;git-commit-后发现遗漏文件解决办法&quot;&gt;&lt;a href=&quot;#git-commit-后发现遗漏文件解决办法&quot; class=&quot;headerlink&quot; title=&quot;git commit 后发现遗漏文件解决办法&quot;&gt;&lt;/a&gt;git commit 后发现遗漏文件解决办法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注意: 在push之前进行操作&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add xx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;aa&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add yy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit --amend -m &lt;span class=&quot;string&quot;&gt;&#39;aa and bb&#39;&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;# update commit summary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit --amend -m --no-edit          &lt;span class=&quot;comment&quot;&gt;# don&#39;t update commit summary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://cabbywang.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>python高阶函数Filter</title>
    <link href="http://cabbywang.github.io/2018/04/27/filter/"/>
    <id>http://cabbywang.github.io/2018/04/27/filter/</id>
    <published>2018-04-27T14:54:48.000Z</published>
    <updated>2018-05-24T14:58:31.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h1><p>filter(function, iterable)<br>filter函数是python中的高阶函数,  第一个参数是一个筛选函数, 第二个参数是一个可迭代对象, 返回的是一个生成器类型, 可以通过next获取值. 这里大致讲述下原理, filter()把传入的function依次作用于iterable的每个元素, 满足条件的返回true, 不满足条件的返回false, 通过true还是false决定将该元素丢弃还是保留.</p><p>下面是简单的操作, 直接上代码</p><ul><li>处理list<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表(list)</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list(filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">3</span>, a))</span><br><span class="line"><span class="comment"># [4, 5]</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>处理dict<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典(dict)</span></span><br><span class="line">d = &#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>, <span class="number">5</span>: <span class="string">'e'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &gt; <span class="number">3</span>, d.items()):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment"># (4, 'd')</span></span><br><span class="line"><span class="comment"># (5, 'e')</span></span><br></pre></td></tr></table></figure></li></ul><p>这里使用<code>d.items()</code>, 所以返回的元素为元组, 下面代码可以做个对比<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>, <span class="number">5</span>: <span class="string">'e'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &gt; <span class="number">3</span>, d):</span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure></p><p>这里的<code>iterable</code>对象是字典本身<code>d</code>,  这里filter默认使用键值来筛选, 下面用法也可以进行一下, 方便理解<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>, <span class="number">5</span>: <span class="string">'e'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">  print(i)</span><br><span class="line"><span class="comment"># 依次输出 1 2 3 4 5</span></span><br></pre></td></tr></table></figure></p><p>这里直接遍历字典, 不使用<code>d.items()</code>, 默认遍历的是键值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>, <span class="number">5</span>: <span class="string">'e'</span>&#125;</span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> d.values()</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><p>以上代码判断<code>2</code>是否存在字典<code>d</code>中, 直接使用<code>2 in d</code>, 默认在<code>keys</code>中去寻找, 如果要在<code>values</code>中去找, 则需要使用<code>&#39;a&#39; in d.values()</code></p><p>好了- -, 这里一不小心扯得有点多, 跑题了……回归正题, 看代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">3</span>, a)</span><br><span class="line"><span class="comment"># &lt;filter at 0x25d4f2ae518&gt;</span></span><br><span class="line">f = _</span><br><span class="line">list(f)</span><br><span class="line"><span class="comment"># [4, 5]</span></span><br><span class="line">list(f)</span><br><span class="line"><span class="comment"># []</span></span><br></pre></td></tr></table></figure></p><p>这里有点意思,  我在这里进行了两次<code>list(f)</code>的操作,  第一次可以输出正确的值, 第二次就是空值了. 试过好几次都是这样, 是不是很神奇…之前我看过一篇文章, 不过忘了是在哪看过的了, 有讨论过filter返回的生成器的问题, filter返回的是一个生成器, 开篇已经阐述过了, 但是这个生成器有点特殊, <code>只会存在一次</code>, 对, 只会存在一次, 本人感觉这是一种优化(内存优化?). 首先返回的是一个生成器就很优化了, 还加了一个只存在一次的设定, 感觉这很pythonic啊/哭笑, 但是这也是一个极难发现的坑- -!</p><p>继续折腾, 如果<code>filter</code>会有这种设定, 那<code>map</code>这种同样身为高阶函数的是不是也有相同的设定呢!!!<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">map(<span class="keyword">lambda</span> x: x + <span class="number">1</span>, a)</span><br><span class="line"><span class="comment"># &lt;map at 0x25d4f27a6a0&gt;</span></span><br><span class="line">m = _</span><br><span class="line">list(m)</span><br><span class="line"><span class="comment"># [2, 3, 4, 5, 6, 7]</span></span><br><span class="line">list(m)</span><br><span class="line"><span class="comment"># []</span></span><br></pre></td></tr></table></figure></p><p>果然, 同为高阶的<code>map</code>也存在相同的设定</p><p>好了, 先折腾到这儿了- - </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;filter函数&quot;&gt;&lt;a href=&quot;#filter函数&quot; class=&quot;headerlink&quot; title=&quot;filter函数&quot;&gt;&lt;/a&gt;filter函数&lt;/h1&gt;&lt;p&gt;filter(function, iterable)&lt;br&gt;filter函数是python中的高阶函数,  第一个参数是一个筛选函数, 第二个参数是一个可迭代对象, 返回的是一个生成器类型, 可以通过next获取值. 这里大致讲述下原理, filter()把传入的function依次作用于iterable的每个元素, 满足条件的返回true, 不满足条件的返回false, 通过true还是false决定将该元素丢弃还是保留.&lt;/p&gt;
&lt;p&gt;下面是简单的操作, 直接上代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理list&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列表(list)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list(filter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# [4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://cabbywang.github.io/tags/python/"/>
    
      <category term="高阶函数" scheme="http://cabbywang.github.io/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
      <category term="filter" scheme="http://cabbywang.github.io/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>Beautifulsoup</title>
    <link href="http://cabbywang.github.io/2018/04/27/beautifulsoup/"/>
    <id>http://cabbywang.github.io/2018/04/27/beautifulsoup/</id>
    <published>2018-04-27T05:25:48.000Z</published>
    <updated>2018-05-24T14:58:31.449Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="BeatifulSoup"><a href="#BeatifulSoup" class="headerlink" title="BeatifulSoup"></a>BeatifulSoup</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="</span>title<span class="string">" name="</span>dromouse<span class="string">"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="</span>story<span class="string">"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="</span>http:<span class="comment">//example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line">&lt;a href=<span class="string">"http://example.com/lacie"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sister"</span> id=<span class="string">"link2"</span>&gt;Lacie&lt;<span class="regexp">/a&gt; and</span></span><br><span class="line"><span class="regexp">&lt;a href="http:/</span><span class="regexp">/example.com/</span>tillie<span class="string">" class="</span>sister<span class="string">" id="</span>link3<span class="string">"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="</span>story<span class="string">"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure><p>解析html<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeutifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">soup.prettify()                 <span class="comment"># 获取html文本(prettify有美化/装饰的意思，renturn一个标准的html格式，标准的缩进格式)</span></span><br><span class="line">soup.head.prettify()</span><br></pre></td></tr></table></figure></p><p>soup属性及方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">soup.title                      <span class="comment"># 获取&lt;title&gt;标签</span></span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line">soup.head</span><br><span class="line"><span class="comment"># &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line">soup.title.string               <span class="comment"># &lt;title&gt;标签内的字符</span></span><br><span class="line"><span class="comment"># "The Dormouse's story"</span></span><br><span class="line">soup.title.name                 <span class="comment"># 获取名称(通过标签获取标签名称)</span></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 工厂方法</span></span><br><span class="line">soup.new_string(<span class="string">''</span>,)</span><br><span class="line">soup.new_tag(<span class="string">''</span>[,href=<span class="string">''</span>,])</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>Tag(Name, Attributes)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">tag = soup.p</span><br><span class="line">tag.string                   <span class="comment"># 标签中的值</span></span><br><span class="line">tag[<span class="string">'class'</span>]                 <span class="comment"># 获取p中的属性值(多值属性 返回类型为list)</span></span><br><span class="line"><span class="comment"># ['title']                     # 这里class为多值属性</span></span><br><span class="line">tag.attrs                    <span class="comment"># &lt;p&gt;标签属性字典</span></span><br><span class="line"><span class="comment"># &#123;'class': ['title'], 'name': 'dromouse'&#125;</span></span><br><span class="line">tag.attrs[<span class="string">'class'</span>]</span><br><span class="line"><span class="comment"># ['title']</span></span><br><span class="line">tag[<span class="string">'name'</span>]</span><br><span class="line"><span class="comment"># 'dromouse'</span></span><br><span class="line">tag.attrs[<span class="string">'name'</span>]</span><br><span class="line"><span class="comment"># 'dromouse'</span></span><br><span class="line">tag.has_attr(<span class="string">'class'</span>)       <span class="comment"># 判断tag是否有是否包含'class'属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名一个tag</span></span><br><span class="line">tag.name = <span class="string">'blockquote'</span>     <span class="comment"># 将&lt;p&gt;重命名为&lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"># 改变属性的值</span></span><br><span class="line">tag[<span class="string">'class'</span>] = <span class="string">'verybold'</span>   <span class="comment"># 将class='title'变为class='verybold'</span></span><br><span class="line"><span class="comment">#添加或删除属性</span></span><br><span class="line"><span class="keyword">del</span> tag[<span class="string">'class'</span>]            <span class="comment"># 删除class属性</span></span><br><span class="line">tag[<span class="string">'id'</span>] = <span class="number">1</span></span><br><span class="line"><span class="comment"># 改变string属性</span></span><br><span class="line">tag.string = <span class="string">'New link text.'</span></span><br><span class="line"><span class="comment"># tag中添加内容</span></span><br><span class="line">tag.append(<span class="string">'Bar'</span>)           <span class="comment"># &lt;p&gt;在这里添加内容&lt;/p&gt;, 类似python中的append()方法</span></span><br><span class="line">tag.insert(<span class="number">1</span>, <span class="string">'inserttxt'</span>)  <span class="comment"># 把元素插入到指定位置，类似python中的insert()方法</span></span><br><span class="line"></span><br><span class="line">tag.clear()                 <span class="comment"># 移除tag中的内容(只移除tag中的内容)</span></span><br><span class="line">ext_tag = tag.extract()               <span class="comment"># 移除tag并作为方法结果返回，类似python中的pop()方法</span></span><br><span class="line">ext_tag.extract()           <span class="comment"># 被移除并返回的tag可以继续调用extract方法</span></span><br><span class="line">tag.decompose()             <span class="comment"># 将当前节点移除文档树并完全销毁</span></span><br></pre></td></tr></table></figure></p><p>过滤器(find_all())<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">'p'</span>)              <span class="comment"># 返回一个list(&lt;p&gt;标签)</span></span><br></pre></td></tr></table></figure></p><p>contents, children, descendants<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## .content返回一个列表</span></span><br><span class="line">soup.contens                    <span class="comment"># 将html以列表的方式输出</span></span><br><span class="line">tag.contents                 <span class="comment"># 将&lt;p&gt;的子节点以列表的方式输出</span></span><br><span class="line">tag.contents[<span class="number">0</span>]              <span class="comment"># 获取第0索引</span></span><br><span class="line">tag.contents[<span class="number">0</span>].name         <span class="comment"># 0索引值的标签名</span></span><br><span class="line">len(tag.contents)</span><br><span class="line"></span><br><span class="line"><span class="comment">## .children返回一个生成器</span></span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(tag.children):   <span class="comment"># 对tag的子节点进行循环</span></span><br><span class="line">    print(i, child)</span><br><span class="line"><span class="comment">#  0 &lt;b&gt;The Dormouse's story&lt;/b&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## .descendants(类似于os.walk的效果，遍历所有子节点)</span></span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(tag.descendants):</span><br><span class="line">    print(i, child)</span><br><span class="line"><span class="comment"># 0 &lt;b&gt;The Dormouse's story&lt;/b&gt;</span></span><br><span class="line"><span class="comment"># 1 The Dormouse's story</span></span><br></pre></td></tr></table></figure></p><p>get_text()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 只得到tag中包含的文本内容</span><br><span class="line">soup.get_text()</span><br><span class="line">soup.p.text()</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;BeatifulSoup&quot;&gt;&lt;a href=&quot;#BeatifulSoup&quot; class=&quot;headerlink&quot; title=&quot;BeatifulSoup&quot;&gt;&lt;/a&gt;BeatifulSoup&lt;/h2&gt;&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;html = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;The Dormouse&#39;s story&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;p class=&quot;&lt;/span&gt;title&lt;span class=&quot;string&quot;&gt;&quot; name=&quot;&lt;/span&gt;dromouse&lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;&amp;lt;b&amp;gt;The Dormouse&#39;s story&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;p class=&quot;&lt;/span&gt;story&lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;Once upon a time there were three little sisters; and their names were&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;a href=&quot;&lt;/span&gt;http:&lt;span class=&quot;comment&quot;&gt;//example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&amp;gt;&amp;lt;!-- Elsie --&amp;gt;&amp;lt;/a&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&lt;span class=&quot;string&quot;&gt;&quot;http://example.com/lacie&quot;&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;sister&quot;&lt;/span&gt; id=&lt;span class=&quot;string&quot;&gt;&quot;link2&quot;&lt;/span&gt;&amp;gt;Lacie&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/a&amp;gt; and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;lt;a href=&quot;http:/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/example.com/&lt;/span&gt;tillie&lt;span class=&quot;string&quot;&gt;&quot; class=&quot;&lt;/span&gt;sister&lt;span class=&quot;string&quot;&gt;&quot; id=&quot;&lt;/span&gt;link3&lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;Tillie&amp;lt;/a&amp;gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;and they lived at the bottom of a well.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;p class=&quot;&lt;/span&gt;story&lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;...&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解析html&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;soup = BeutifulSoup(html, &lt;span class=&quot;string&quot;&gt;&#39;lxml&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;soup.prettify()                 &lt;span class=&quot;comment&quot;&gt;# 获取html文本(prettify有美化/装饰的意思，renturn一个标准的html格式，标准的缩进格式)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;soup.head.prettify()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;soup属性及方法&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;soup.title                      &lt;span class=&quot;comment&quot;&gt;# 获取&amp;lt;title&amp;gt;标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &amp;lt;title&amp;gt;The Dormouse&#39;s story&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;soup.head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;The Dormouse&#39;s story&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;soup.title.string               &lt;span class=&quot;comment&quot;&gt;# &amp;lt;title&amp;gt;标签内的字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &quot;The Dormouse&#39;s story&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;soup.title.name                 &lt;span class=&quot;comment&quot;&gt;# 获取名称(通过标签获取标签名称)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# title&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 工厂方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;soup.new_string(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;soup.new_tag(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;[,href=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://cabbywang.github.io/tags/python/"/>
    
      <category term="beautifulsoup" scheme="http://cabbywang.github.io/tags/beautifulsoup/"/>
    
      <category term="html" scheme="http://cabbywang.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>python 魔术方法</title>
    <link href="http://cabbywang.github.io/2018/03/29/magic/"/>
    <id>http://cabbywang.github.io/2018/03/29/magic/</id>
    <published>2018-03-29T05:25:48.000Z</published>
    <updated>2018-05-24T14:58:31.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Magic-Methods"><a href="#Magic-Methods" class="headerlink" title="Magic Methods"></a>Magic Methods</h1><p>python中类似<code>__xxx__</code>的魔术方法, 感觉非常有意思, 这里把我遇到的部分魔术方法作个总结, 也方便自己理解和查阅, 之后会慢慢的完善- -</p><h2 id="class"><a href="#class" class="headerlink" title="__class__"></a><code>__class__</code></h2><p>之后再总结</p><hr><h2 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a><code>__slots__</code></h2><p>我的初步理解, 限制对象可以用来获取和赋值的属性<br><br>直接上代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.name = <span class="string">'aa'</span>     <span class="comment"># 可以给a一个name属性然后赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.name            <span class="comment"># 可以获取到name的值</span></span><br><span class="line"><span class="string">'aa'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.age = <span class="string">'12'</span></span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sex             <span class="comment"># 但是不能获取a中没有的属性</span></span><br><span class="line"><span class="comment"># AttributeError: 'A' object has no attribute 'sex'</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>给B加上属性<code>__slots__</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = &#123;&#125;</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.name = <span class="string">'bb'</span>       <span class="comment"># 给b附加属性会报AttributeError</span></span><br><span class="line"><span class="comment"># AttributeError: 'B' object has no attribute 'name'</span></span><br></pre></td></tr></table></figure></p><p>创建C给属性<code>__slot__</code>加上值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = &#123;<span class="string">'name'</span>, <span class="string">'age'</span>&#125;        <span class="comment"># __slot__ = ['name', 'age']  </span></span><br><span class="line">    <span class="comment"># 经测试这里set, list, tuple都可以</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">c = C(<span class="string">'wangsiyong'</span>, <span class="string">'21'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # name和age在slots中, 可以获取属性值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.name</span><br><span class="line"><span class="string">'wangsiyong'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.age</span><br><span class="line"><span class="string">'21'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.sex = <span class="string">'man'</span>  <span class="comment"># 给c附加slots中没有的属性, 会报AttributeError</span></span><br><span class="line"><span class="comment"># AttributeError: 'C' object has no attribute 'sex'</span></span><br></pre></td></tr></table></figure></p><p><strong>总结:</strong> 如果类中没有<code>__slots__</code>属性, 用户可以随意给对象添加属性,操作属性; 在类中定义<code>__slots__</code>后, 用户则只能对<code>__slots__</code>属性中的值进行操作了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Magic-Methods&quot;&gt;&lt;a href=&quot;#Magic-Methods&quot; class=&quot;headerlink&quot; title=&quot;Magic Methods&quot;&gt;&lt;/a&gt;Magic Methods&lt;/h1&gt;&lt;p&gt;python中类似&lt;code&gt;__xxx__&lt;/code&gt;的魔术方法, 感觉非常有意思, 这里把我遇到的部分魔术方法作个总结, 也方便自己理解和查阅, 之后会慢慢的完善- -&lt;/p&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; class=&quot;headerlink&quot; title=&quot;__class__&quot;&gt;&lt;/a&gt;&lt;code&gt;__class__&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;之后再总结&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;slots&quot;&gt;&lt;a href=&quot;#slots&quot; class=&quot;headerlink&quot; title=&quot;__slots__&quot;&gt;&lt;/a&gt;&lt;code&gt;__slots__&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;我的初步理解, 限制对象可以用来获取和赋值的属性&lt;br&gt;&lt;br&gt;直接上代码&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = A()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.name = &lt;span class=&quot;string&quot;&gt;&#39;aa&#39;&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# 可以给a一个name属性然后赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.name            &lt;span class=&quot;comment&quot;&gt;# 可以获取到name的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;aa&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.age = &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.sex             &lt;span class=&quot;comment&quot;&gt;# 但是不能获取a中没有的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# AttributeError: &#39;A&#39; object has no attribute &#39;sex&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://cabbywang.github.io/tags/python/"/>
    
      <category term="magic method" scheme="http://cabbywang.github.io/tags/magic-method/"/>
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="http://cabbywang.github.io/2018/03/27/test-my-site/"/>
    <id>http://cabbywang.github.io/2018/03/27/test-my-site/</id>
    <published>2018-03-27T14:35:26.000Z</published>
    <updated>2018-05-24T14:58:31.450Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cccjdfdkjfdikkj</span><br><span class="line"></span><br><span class="line">fdsfds</span><br><span class="line">fd</span><br></pre></td></tr></table></figure><h1 id="a"><a href="#a" class="headerlink" title="a"></a>a</h1><ul><li>1<a id="more"></a></li><li>2</li><li>3</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cccjdfdkjfdikkj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fdsfds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;a&quot;&gt;&lt;a href=&quot;#a&quot; class=&quot;headerlink&quot; title=&quot;a&quot;&gt;&lt;/a&gt;a&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1
    
    </summary>
    
    
      <category term="qaq" scheme="http://cabbywang.github.io/tags/qaq/"/>
    
  </entry>
  
</feed>
